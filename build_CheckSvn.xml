<?xml version="1.0" encoding="UTF-8"?>
<!-- Ant build file -->
<project basedir="." default="create-zip" name="HierarchicalClustering">
	<property name="dirOffset" value="../" />
	<import file="${dirOffset}/commontargets.xml" />

	<target name="_init" depends="init,_init.svn.check">
	    <tstamp />
		<property name="appfile" value="hcl.jar" />
		<property name="inclds" value="org/**" />
		<path id="library.classpath">
			<fileset dir="lib" id="jarlib" includes="Jama-1.0.2.jar legacy-gp-modules.jar trove.jar ant.jar" />
		</path>

	    <!-- PatternSets used for SVN checks.  The module developer defines these; the intention is that the 
	         defaults cover most uses and these provide overrides. -->
	    <!-- PatternSet with includes/excludes for SVN "dirty" check -->
	    <patternset id="module.svn.check">
            <patternset refid="default.svn.check" />
            <exclude name="${moduleHome}/dist/${appfile}" />
        </patternset>
        <!-- PatternSet with includes/excludes for SVN "unversioned" check -->
        <patternset id="module.svn.check.unvers">
            <patternset refid="default.svn.check.unvers" />
            <exclude name="${moduleHome}/dist/${appfile}" />
        </patternset>
	</target>
    
    <target name="_init.svn.check">
        <basename property="moduleHome" file="${basedir}" />
        <patternset id="default.svn.check">
            <include name="${moduleHome}/**" />
            <exclude name="${moduleHome}/classes/**" />
            <exclude name="${moduleHome}/dist/**" />
            <include name="*" />
            <exclude name=".*project" />
            <exclude name=".classpath" />
        </patternset>
        <patternset id="default.svn.check.unvers">
            <include name="${moduleHome}/**" />
            <exclude name="${moduleHome}/test/**" />
            <exclude name="${moduleHome}/classes/**" />
            <exclude name="${moduleHome}/dist/**" />
            <include name="*" />
            <exclude name=".*project" />
        </patternset>
    </target>
    
    <target name="check_svn" depends="_init">
        <if>
            <not><isset property="module.svn.check"/></not>
            <then><patternset id="module.svn.check" refid="default.svn.check" /></then>
        </if>
        <if>
            <not><isset property="module.svn.check.unvers"/></not>
            <then><patternset id="module.svn.check.unvers" refid="default.svn.check.unvers" /></then>
        </if>
        <echo>Checking SVN for dirty files...</echo>
        <fileset dir="${dirOffset}" id="svn.dirty">
            <patternset refid="module.svn.check" />
            <or>
                <svnAdded />
                <svnConflicted />
                <svnDeleted />
                <svnMissing />
                <svnModified />
                <svnReplaced />
            </or>
        </fileset>
        <for param="filename">
            <fileset refid="svn.dirty" />
            <sequential><echo>@{filename}</echo></sequential>
        </for>
        <echo>${line.separator}Checking SVN for unversioned files...</echo>
        <fileset dir="${dirOffset}" id="svn.unvers">
            <patternset refid="module.svn.check.unvers" />
            <svnUnversioned />
        </fileset>
        <for param="filename">
            <fileset refid="svn.unvers" />
            <sequential><echo>@{filename}</echo></sequential>
        </for>
        <condition property="svn.chk.fail">
            <or>
                <resourcecount when="greater" count="0" refid="svn.dirty" />
                <resourcecount when="greater" count="0" refid="svn.unvers" />
            </or>
        </condition>
        <fail message="Please update from SVN and check-in or remove unversioned files." if="svn.chk.fail" />
    </target>

	<target name="package" depends="_init, compile">
        <jar destfile="dist/${appfile}" basedir="classes" update="true" defaultexcludes="true" >
       </jar>
	</target>

	<target name="compile" depends="_init">
	    <mkdir dir="classes" />
		<javac debug="true" defaultexcludes="true" includeantruntime="false" 
		    deprecation="true" destdir="classes" includes="${inclds}" optimize="false" srcdir="src" target="${java.target}" source="${java.target}">
			<classpath refid="library.classpath" />
		</javac>
	</target>

	<target name="run" depends="_init">
		<java fork="true" classpath="./:${library.classpath}" classname="org.genepattern.modules.hcl.ClusterMain">
			<arg value="~/datasets/all_aml_train.gct" />
		</java>
	</target>

	<target name="java-test" depends="_init">
		<java fork="true" classpath="./:${library.classpath}" classname="org.genepattern.modules.hcl.DiffJavaAndC">
		</java>
	</target>

	<target depends="_init, package" name="create-zip">
		<antcall target="prezip" />

		<zip destfile="${dest.dir}/${ant.project.name}.zip" whenempty="fail" defaultexcludes="true">
			<fileset dir="." includes="LICENSE.txt, manifest, *.pdf" />
            <fileset dir="lib" includes="*.jar" />
            <fileset dir="dist" includes="*.jar" />
			<zipfileset dir="." includes="cluster*" filemode="654" />
		</zip>
		<antcall target="postzip" />
	</target>

</project>
